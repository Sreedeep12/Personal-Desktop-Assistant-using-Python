# Importing necessary libraries for various functionalities
import pyttsx3  # For text-to-speech conversion
import datetime  # To handle date and time operations
import speech_recognition as sr  # For recognizing speech using a microphone
import wikipedia  # For fetching summaries from Wikipedia
import webbrowser  # For opening URLs in a web browser
import os  # For interacting with the operating system
import smtplib  # For sending emails
import pywhatkit as wk  # For additional utilities like playing YouTube videos
# from database import getans  # For retrieving answers from a database (commented out)
# from database import qa  # For question-answer functionality from a database (commented out)
import requests  # For making HTTP requests
import cv2  # For camera and image processing
import random  # For generating random numbers
import pyautogui  # For controlling the GUI
import time  # For various time-related functions

# Initializing the text-to-speech engine
engine = pyttsx3.init('sapi5')  # Using SAPI5 for voice output
voices = engine.getProperty('voices')  # Getting available voices
engine.setProperty('voice', voices[1].id)  # Setting the voice to the second available voice

# Function to make the program speak a given text
def speak(audio):
    engine.say(audio)  # Say the provided text
    engine.runAndWait()  # Wait for the speech to finish

# Function to greet the user based on the current time
def wishMe():
    hour = int(datetime.datetime.now().hour)  # Get the current hour
    if hour >= 0 and hour < 12:
        speak("Good Morning!")  # Morning greeting
        print("Good Morning!")
    elif hour >= 12 and hour < 18:
        speak("Good Afternoon!")  # Afternoon greeting
        print("Good Afternoon!")
    else:
        speak("Good Evening!")  # Evening greeting
        print("Good Evening!")

    speak("This is Rocs how may i rock your world?")  # Introduction
    print("This is Rocs how may i rock your world?")

# Function to take voice commands from the user
def takeCommand():
    '''
    It takes mic - voice input and returns string output
    '''
    r = sr.Recognizer()  # Initializing the recognizer
    with sr.Microphone() as source:  # Using the microphone as source
        r.pause_threshold = 1  # Setting a pause threshold for speech
        audio = r.listen(source)  # Listening to the user's input
        print("I am listening...")

    try:
        print("Working on it...")
        query = r.recognize_google(audio, language='en-in')  # Recognizing the voice input
        query = query.lower()  # Converting to lowercase
        print(f"user said: {query}\n")
    except Exception as e:  # In case the voice can't be recognized
        print("Can't Recognise will you say that again please...")
        speak("Can't Recognise will you say that again please...")
        return "None"
    return query  # Returning the recognized text

# Function to send an email
def sendEmail(to, content):
    server = smtplib.SMTP('smtp.gmail.com', 587)  # Connecting to the SMTP server
    server.ehlo()  # Establishing the connection
    server.starttls()  # Securing the connection
    server.login('youremail@gmail.com', 'your-password')  # Logging in to the email account
    server.sendmail('youremail@gmail.com', to, content)  # Sending the email
    server.close()  # Closing the server connection

# Main function where the script execution starts
if __name__ == "__main__":
    wishMe()  # Call the function to greet the user

    # Infinite loop to keep the program running and taking commands
    while True:
        query = takeCommand().lower()  # Taking the user command

        # Logic to execute tasks based on the user's query
        if 'wikipedia' in query:
            speak('searching in wikipedia....')
            query = query.replace("wikipedia", "")  # Removing 'wikipedia' from the query
            results = wikipedia.summary(query, sentences=1)  # Fetching summary from Wikipedia
            speak("According to Wikipedia")
            speak(results)
            print(results)

        elif 'open youtube' in query:
            speak("What do you want me to play?")
            print("What do you want me to play?")
            qry = takeCommand().lower()  # Taking the search term
            wk.playonyt(f"{qry}")  # Playing the video on YouTube

        elif 'open google' in query:
            speak("What should I search?")
            print("What should I search?")
            qry = takeCommand().lower()  # Taking the search term
            webbrowser.open(f"{qry}")  # Opening the search in a web browser
            results = wikipedia.summary(qry, sentences=1)  # Fetching a brief summary from Wikipedia
            speak(results)

        elif 'open stack overflow' in query:
            webbrowser.open("stackoverflow.com")  # Opening Stack Overflow
            speak("Opening Stack Overflow")

        elif 'the time' in query:
            strTime = datetime.datetime.now().strftime("%H:%M:%S")  # Getting the current time
            speak(f"Yo! The time is {strTime}")
            print(f"Yo! The time is {strTime}")

        elif 'open code' in query:
            codePath = "C:\\Users\\USER\\AppData\\Local\\Programs\\Microsoft VS Code\\Code.exe"  # Path to VS Code
            os.startfile(codePath)  # Opening VS Code
            speak("Opening Code")

        elif 'close browser' in query:
            os.system("taskkill /f /im msedge.exe")  # Closing Microsoft Edge

        elif 'close chrome' in query:
            os.system("taskkill /f /im chrome.exe")  # Closing Google Chrome

        elif 'take screenshot' in query:
            speak('Tell me a name for the file')
            name = takeCommand().lower()  # Taking the name for the screenshot file
            time.sleep(3)  # Waiting for a few seconds
            img = pyautogui.screenshot()  # Taking a screenshot
            img.save(f"{name}.png")  # Saving the screenshot with the given name
            speak("Screenshot saved")

        elif 'email to naman' in query:
            try:
                speak("What should I say?")
                content = takeCommand()  # Taking the content for the email
                to = "namanagarwal@email.com"  # Recipient's email address
                sendEmail(to, content)  # Sending the email
                speak("Email has been sent!")
            except Exception as e:
                print(e)
                speak("Sorry mate, the mail can't be sent!")

        elif 'who are you' in query:
            speak("I am Rocs, a smart A.I. for your fun")
            print("I am Rocs, a smart A.I. for your fun")

        elif 'hello rocks' in query:
            speak("Hello, I am ready to rock your world")
            print("Hello, I am ready to rock your world")

        elif 'hello rock' in query:
            speak("Hello, I am ready to rock your world")
            print("Hello, I am ready to rock your world")

        elif 'hello rocs' in query:
            speak("Hello, I am ready to rock your world")
            print("Hello, I am ready to rock your world")

        elif 'hi rocks' in query:
            speak("Hello, I am ready to rock your world")
            print("Hello, I am ready to rock your world")

        elif 'hi rock' in query:
            speak("Hello, I am ready to rock your world")
            print("Hello, I am ready to rock your world")

        elif 'how are you' in query:
            speak("I am fine, how are you?")
            print("I am fine, how are you?")

        elif 'i am fine' in query:
            speak("Nice, anything I can do for you?")
            print("Nice, anything I can do for you?")

        elif 'i love you' in query:
            speak("I am not meant for love, only work")
            print("I am not meant for love, only work")

        elif 'your name' in query:
            speak("I am Rocs, a rocking AI")
            print("I am Rocs, a rocking AI")

        elif 'better than google' in query:
            speak("I try to follow my idol, my role model, but I try to be better")
            print("I try to follow my idol, my role model, but I try to be better")

        elif 'better you or google' in query:
            speak("I try to follow my idol, my role model, but I try to be better")
            print("I try to follow my idol, my role model, but I try to be better")

        elif 'better than alexa' in query:
            speak("I try to follow my idol, my role model, but I try to be better")
            print("I try to follow my idol, my role model, but I try to be better")

        elif 'better you or alexa' in query:
            speak("I try to follow my idol, my role model, but I try to be better")
            print("I try to follow my idol, my role model, but I try to be better")

        elif 'what is' in query:
            print("Searching Wikipedia")
            speak("Searching Wikipedia")
            query = query.replace("what is", "")  # Removing 'what is' from the query
            results = wikipedia.summary(query, sentences=1)  # Fetching a brief summary from Wikipedia
            speak("According to Wikipedia")
            speak(results)
            print(results)

        elif 'who is' in query:
            print("Searching Wikipedia")
            speak("Searching Wikipedia")
            query = query.replace("who is", "")  # Removing 'who is' from the query
            results = wikipedia.summary(query, sentences=1)  # Fetching a brief summary from Wikipedia
            speak("According to Wikipedia")
            speak(results)
            print(results)

        elif 'open camera' in query:
            cap = cv2.VideoCapture(0)  # Accessing the default camera
            while True:
                ret, img = cap.read()  # Reading frames from the camera
                cv2.imshow('webcam', img)  # Displaying the video feed
                k = cv2.waitKey(50)  # Waiting for a key event
                if k == 27:  # Exit on pressing 'Esc' key
                    break
            cap.release()  # Releasing the camera
            cv2.destroyAllWindows()  # Closing all OpenCV windows

        elif 'volume up' in query:
            for num in range(1, 11):
                pyautogui.press("volumeup")  # Increasing the volume

        elif 'volume down' in query:
            for num in range(1, 11):
                pyautogui.press("volumedown")  # Decreasing the volume

        elif "mute" in query:
            pyautogui.press("volumemute")  # Muting the volume

        elif "unmute" in query:
            pyautogui.press("volumemute")  # Unmuting the volume

        elif 'close browser' in query:
            browserExe = "msedge.exe"
            os.system("taskkill /f /im " + browserExe)  # Closing Microsoft Edge

        elif 'close chrome' in query:
            os.system("taskkill /f /im chrome.exe")  # Closing Google Chrome

        # elif 'joke' in query:
        #     url="https://official-joke-api.appsot.com/random_joke"
        #     json_data=requests.get(url).json()
        #
        #     arr=["",""]
        #     arr[0]=json_data["setup"]
        #     arr[1]= json_data["punchline"]
        #     print(arr[0])
        #     speak(arr[0])
        #     print(arr[1])
        #     speak(arr[1])

        # elif qa()!="" :
        #     answer= getans(query)
        #     speak(answer)
        #     print(answer)

        elif 'shut up' in query:
            speak("Sorry! I'll be offline")
            print("Sorry! I'll be offline")
            break  # Exit the loop and end the program

        elif 'shut down' in query:
            speak("Sorry! I'll be offline")
            print("Sorry! I'll be offline")
            break  # Exit the loop and end the program

        elif 'quit' in query:
            speak("See you soon")
            print("See you soon")
            break  # Exit the loop and end the program

        elif 'bye' in query:
            speak("See you soon")
            print("See you soon")
            break  # Exit the loop and end the program

